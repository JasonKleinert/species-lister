{"version":3,"sources":["IconicTaxaSelector.jsx","LocationInput.jsx","ListerButton.jsx","SpeciesList.jsx","utilities/fetchObservations.js","ListerContent.jsx","ListerLayout.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Option","Select","IconicTaxaSelector","props","className","placeholder","allowClear","style","width","onChange","handleIconicTaxaChange","value","LocationInput","handleSelectLocation","type","onClick","handleLocationButtonClick","location","ListerButton","size","handleListerButtonClick","handleClearListerButtonClick","SpeciesList","orientation","speciesList","length","iconicTaxa","dataSource","renderItem","item","Item","recursiveObservationFetcher","pageNum","numPages","lat","long","radius","results","a","console","log","uri","fetch","method","headers","response","ok","message","status","Error","json","observations","push","nextPage","ListerContent","useState","setIconicTaxa","setLocation","setRadius","setNumPages","data","setData","loading","setLoading","success","pos","crd","coords","latitude","longitude","accuracy","error","err","warn","code","e","navigator","geolocation","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","window","alert","min","max","defaultValue","formatter","parser","replace","split","then","dataPages","speciesSet","Set","forEach","page","observation","add","sort","createSpeciesList","tip","Header","Layout","Footer","ListerLayout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae3b7b05.chunk.js","sourcesContent":["import { Select } from 'antd';\n\nconst { Option } = Select;\n\nexport function IconicTaxaSelector(props) {\n  return (\n    <div className=\"iconic-taxa-selector\">\n      <Select\n        placeholder=\"Select iconic taxa\"\n        allowClear={true}\n        style={{ width: 200 }}\n        onChange={props.handleIconicTaxaChange}\n      >\n        <Option value=\"Animalia\">Animalia</Option>\n        <Option value=\"Amphibia\">Amphibia</Option>\n        <Option value=\"Arachnida\">Arachnida</Option>\n        <Option value=\"Aves\">Aves</Option>\n        <Option value=\"Chromista\">Chromista</Option>\n        <Option value=\"Fungi\">Fungi</Option>\n        <Option value=\"Insecta\">Insecta</Option>\n        <Option value=\"Mammalia\">Mammalia</Option>\n        <Option value=\"Mollusca\">Mollusca</Option>\n        <Option value=\"Reptilia\">Reptilia</Option>\n        <Option value=\"Plantae\">Plantae</Option>\n        <Option value=\"Protozoa\">Protozoa</Option>\n      </Select>\n    </div>\n  )\n}\n","import { Button, Select } from 'antd';\n\nconst { Option } = Select;\n\nexport function LocationInput(props) {\n  return (\n    <div className=\"location-controls\">\n      <Select\n        placeholder=\"Select location\"\n        allowClear={true}\n        onChange={props.handleSelectLocation}\n      >\n        <Option value=\"30.092146220963105, -97.41695255909492\">Earth Native</Option>\n        <Option value=\"26.2290,-97.3473\">Laguna Atascosa</Option> \n      </Select>\n      <h3>OR</h3>\n      <Button\n        className=\"location-button\"\n        type=\"default\"\n        onClick={props.handleLocationButtonClick}\n      >\n      Use my current location\n      </Button>\n      <p className=\"location-selected\">\n        {props.location}\n      </p>\n    </div>\n  )\n}\n","import { Button } from 'antd';\n\nexport function ListerButton(props) {\n  return (\n    <div className=\"lister-button\">\n      <Button\n        type=\"primary\"\n        size=\"large\"\n        onClick={props.handleListerButtonClick}\n      >\n        List Species\n      </Button>\n      <Button\n        type=\"default\"\n        size=\"large\"\n        onClick={props.handleClearListerButtonClick}\n      >\n        Clear List\n      </Button>\n    </div>\n  );\n}\n","import { List, Divider } from 'antd';\n\nexport function SpeciesList(props) {\n  return (\n    <div className=\"species-list\">\n      <Divider\n        orientation=\"left\">\n        {`${props.speciesList.length} ${props.iconicTaxa} Species`}\n      </Divider>\n      <List\n        // header={<div>{props.iconicTaxa}</div>}\n        // bordered\n        dataSource={props.speciesList}\n        renderItem={item => (\n          <List.Item>{item}</List.Item>\n        )}\n      />\n      {/* <Divider orientation=\"left\">Small Size</Divider> */}\n    </div>\n  );\n}\n","export const recursiveObservationFetcher = async (\n    iconicTaxa, pageNum, numPages, lat, long, radius, results\n)  => {\n    console.log(pageNum);\n    let uri = `https://api.inaturalist.org/v1/observations?page=${pageNum}&per_page=200&iconic_taxa=${iconicTaxa}&lat=${lat}&lng=${long}&radius=${radius}&quality_grade=research&order=desc&order_by=created_at`\n    console.log(uri);\n    const response = await fetch(\n        uri, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n        }\n    );\n    \n    if (!response.ok) {\n        const message = `An error has occured: ${response.status}`;\n        throw new Error(message);\n    }\n\n    let observations = await response.json();\n    results.push(observations.results);\n\n    console.log(observations.results[observations.results.length - 1]['created_at']);\n    \n    // const numPages = pages;\n\n    if (pageNum === numPages) {\n        return results;\n    } else {\n        let nextPage = pageNum + 1\n        return recursiveObservationFetcher(iconicTaxa, nextPage, numPages, lat, long, radius, results)\n    }\n}\n","import { useState } from 'react';\nimport { InputNumber, Empty, Spin } from 'antd';\nimport { IconicTaxaSelector } from './IconicTaxaSelector';\nimport { LocationInput } from './LocationInput';\nimport { ListerButton } from './ListerButton';\nimport { SpeciesList } from './SpeciesList';\nimport { recursiveObservationFetcher } from './utilities/fetchObservations';\n\nexport function ListerContent() {\n  const [iconicTaxa, setIconicTaxa] = useState('');\n  const [location, setLocation] = useState('');\n  const [radius, setRadius] = useState(50);\n  const [numPages, setNumPages] = useState(5);\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const createSpeciesList = (dataPages) => {\n    let speciesSet = new Set();\n\n    dataPages.forEach(page => {\n        page.forEach(observation => {\n            // console.log(observation);\n            if (observation[\"taxon\"][\"preferred_common_name\"]) {\n              speciesSet.add(observation[\"taxon\"][\"preferred_common_name\"]);\n            }\n        })\n    });\n\n    let speciesList = [...speciesSet].sort();\n    return speciesList;\n  }\n\n  const handleIconicTaxaChange = (value) => {\n    setIconicTaxa(value);\n  }\n\n  const handleSelectLocation = (value) => {\n    setLocation(value);\n  }\n\n  const success = (pos) => {\n    let crd = pos.coords;\n    setLocation(`${crd.latitude}, ${crd.longitude}`);\n\n    console.log('Your current position is:');\n    console.log(`Latitude : ${crd.latitude}`);\n    console.log(`Longitude: ${crd.longitude}`);\n    console.log(`More or less ${crd.accuracy} meters.`);\n  }\n\n  const error = (err) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  const handleLocationButtonClick = (e) => {\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, error, options);\n    } else {\n      window.alert(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  const onSearchRadiusChange = (value) => {\n    setRadius(value);\n  }\n\n  const onNumPagesChange = (value) => {\n    setNumPages(value);\n  }\n  \n  const handleListerButtonClick = (e) => {\n    console.log(location.split(\",\")[0]);\n    setLoading(true);\n    if (data) {\n      setData([]);\n    }\n    recursiveObservationFetcher(\n      iconicTaxa,\n      1,\n      numPages,\n      location.split(\",\")[0],\n      location.split(\",\")[1],\n      radius,\n      []\n    ).then(data => {\n      let speciesList = createSpeciesList(data);\n      setData(speciesList);\n      setLoading(false);\n    })\n  }\n\n  const handleClearListerButtonClick = (e) => {\n    setData([]);\n    setIconicTaxa('');\n    setLocation('');\n    setRadius(50);\n    setNumPages(5);\n  }\n\n  return (\n    <div className=\"lister-content\">\n      <IconicTaxaSelector handleIconicTaxaChange={handleIconicTaxaChange} />\n      <LocationInput\n        location={location}\n        handleLocationButtonClick={handleLocationButtonClick}\n        handleSelectLocation={handleSelectLocation}\n      />\n      <div className=\"search-radius-input\">\n        <InputNumber\n          min={1}\n          max={200}\n          defaultValue={radius}\n          formatter={value => `${value} km`}\n          parser={value => value.replace('km', '')}\n          onChange={onSearchRadiusChange}\n        />\n    </div>\n    <div className=\"numpages-input\">\n        <InputNumber\n          min={1}\n          max={20}\n          defaultValue={numPages}\n          formatter={value => `${value} pgs`}\n          parser={value => value.replace('pgs', '')}\n          onChange={onNumPagesChange}\n        />\n    </div>\n      <ListerButton\n        handleListerButtonClick={handleListerButtonClick}\n        handleClearListerButtonClick={handleClearListerButtonClick}\n      />\n      {!data.length ?\n        loading ?\n          <Spin\n            className=\"spinner\"\n            size=\"large\"\n            tip=\"Gathering observations from iNaturalist...\"\n          /> :\n          <Empty /> :\n            <SpeciesList\n              speciesList={data}\n              iconicTaxa={iconicTaxa}\n            />\n      }\n    </div>\n  )\n}\n","import { Layout } from 'antd';\nimport { ListerContent } from './ListerContent';\n\nconst { Header, Footer } = Layout;\n\nexport function ListerLayout() {\n  return (\n    <Layout className=\"lister-layout\">\n      <Header className=\"lister-header\"><h1>Species Lister</h1></Header>\n      <ListerContent />\n      {/* <Footer className='lister-footer'>\n      List created from the last 2000 observations on <a href='https://inaturalist.org'>inaturalist.org</a>\n      </Footer> */}\n    </Layout>\n  );\n}","import './App.less';\nimport { ListerLayout } from './ListerLayout';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ListerLayout />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}