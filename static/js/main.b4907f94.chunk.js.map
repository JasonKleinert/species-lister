{"version":3,"sources":["ListerButton.jsx","SpeciesList.jsx","utilities/fetchObservations.js","ListerContent.jsx","ListerLayout.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ListerButton","props","className","type","size","onClick","handleListButtonClick","handleClearListButtonClick","SpeciesList","orientation","bordered","dataSource","speciesList","renderItem","item","Item","recursiveObservationFetcher","iconicTaxa","pageNum","results","a","console","log","uri","fetch","method","headers","response","ok","message","status","Error","json","observations","push","length","nextPage","ListerContent","useState","data","setData","loading","setLoading","e","then","dataPages","speciesSet","Set","forEach","page","observation","add","sort","createSpeciesList","active","paragraph","rows","Header","Layout","Footer","ListerLayout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAEO,SAASA,EAAaC,GAC3B,OACE,sBAAKC,UAAU,gBAAf,UACE,cAAC,IAAD,CACEC,KAAM,UACNC,KAAM,QACNC,QAASJ,EAAMK,sBAHjB,iCAOA,cAAC,IAAD,CACEH,KAAM,YACNC,KAAM,QACNC,QAASJ,EAAMM,2BAHjB,2B,sBCVC,SAASC,EAAYP,GAC1B,OACE,sBAAKC,UAAU,eAAf,UACE,cAAC,IAAD,CAASO,YAAY,OAArB,qBACA,cAAC,IAAD,CAEEC,UAAQ,EACRC,WAAYV,EAAMW,YAClBC,WAAY,SAAAC,GAAI,OACd,cAAC,IAAKC,KAAN,UAAYD,U,6BCXTE,EAA2B,uCAAG,WAAOC,EAAYC,EAASC,GAA5B,uBAAAC,EAAA,6DACvCC,QAAQC,IAAIJ,GAERK,EAHmC,2DAGuBL,EAHvB,qCAG2DD,EAH3D,uGAIhBO,MACnBD,EAAK,CACDE,OAAQ,MACRC,QAAS,CACP,eAAgB,sBARa,WAIjCC,EAJiC,QAazBC,GAbyB,sBAc7BC,EAd6B,gCAcMF,EAASG,QAC5C,IAAIC,MAAMF,GAfmB,wBAkBdF,EAASK,OAlBK,WAkBnCC,EAlBmC,OAmBvCd,EAAQe,KAAKD,EAAad,SAE1BE,QAAQC,IAAIW,EAAad,QAAQc,EAAad,QAAQgB,OAAS,GAAnD,YAEK,QAEbjB,EAzBmC,0CA0B5BC,GA1B4B,eA4B/BiB,EAAWlB,EAAU,EA5BU,kBA6B5BF,EAA4BC,EAAYmB,EAAUjB,IA7BtB,4CAAH,0DCMjC,SAASkB,IAAiB,IAAD,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,OAEAF,oBAAS,GAFT,mBAEvBG,EAFuB,KAEdC,EAFc,KAwC9B,OAJArB,QAAQC,IAAR,UAAeiB,EAAKJ,OAApB,sBACAd,QAAQC,IAAIiB,GAIV,sBAAKrC,UAAU,iBAAf,UACE,cAACF,EAAD,CACEM,sBAvBwB,SAACqC,GAC7BD,GAAW,GACPH,GACFC,EAAQ,IAEVxB,EAA4B,WAAY,EAAG,IAAI4B,MAAK,SAAAL,GAClD,IAAI3B,EAtBkB,SAACiC,GACzB,IAAIC,EAAa,IAAIC,IAYrB,OAVAF,EAAUG,SAAQ,SAAAC,GACdA,EAAKD,SAAQ,SAAAE,GAELA,EAAW,MAAX,uBACFJ,EAAWK,IAAID,EAAW,MAAX,6BAKP,YAAIJ,GAAYM,OAUdC,CAAkBd,GACpCC,EAAQ5B,GACR8B,GAAW,OAgBTnC,2BAZ6B,SAACoC,GAClCH,EAAQ,OAaJD,EAAKJ,OAIC,cAAC3B,EAAD,CAAaI,YAAa2B,IAHhCE,EACE,cAAC,IAAD,CAAUa,QAAM,EAACC,UAAW,CAAEC,KAAM,MAClC,cAAC,IAAD,O,ICpDJC,EAAmBC,IAAnBD,OAAmBC,IAAXC,OAET,SAASC,IACd,OACE,eAAC,IAAD,CAAQ1D,UAAU,gBAAlB,UACE,cAACuD,EAAD,CAAQvD,UAAU,gBAAlB,SAAkC,kDAClC,cAACmC,EAAD,OCESwB,MARf,WACE,OACE,qBAAK3D,UAAU,MAAf,SACE,cAAC0D,EAAD,OCMSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b4907f94.chunk.js","sourcesContent":["import { Button } from 'antd';\n\nexport function ListerButton(props) {\n  return (\n    <div className='lister-button'>\n      <Button\n        type={\"primary\"}\n        size={\"large\"}\n        onClick={props.handleListButtonClick}\n      >\n        Create Species List\n      </Button>\n      <Button\n        type={\"secondary\"}\n        size={\"large\"}\n        onClick={props.handleClearListButtonClick}\n      >\n        Clear List\n      </Button>\n    </div>\n  );\n}","import { List, Divider } from 'antd';\n\nexport function SpeciesList(props) {\n  return (\n    <div className='species-list'>\n      <Divider orientation=\"left\">Mammals</Divider>\n      <List\n        // header={<div>Header</div>}\n        bordered\n        dataSource={props.speciesList}\n        renderItem={item => (\n          <List.Item>{item}</List.Item>\n        )}\n      />\n      {/* <Divider orientation=\"left\">Small Size</Divider> */}\n    </div>\n  );\n}","export const recursiveObservationFetcher = async (iconicTaxa, pageNum, results)  => {\n    console.log(pageNum);\n    // let uri = `https://api.inaturalist.org/v1/observations?page=${pageNum}&per_page=200&iconic_taxa=${iconicTaxa}&lat=30.2672&lng=-97.7431&radius=100&quality_grade=research&order=desc&order_by=created_at`\n    let uri = `https://api.inaturalist.org/v1/observations?page=${pageNum}&per_page=200&iconic_taxa=${iconicTaxa}&lat=26.2290&lng=-97.3473&radius=100&quality_grade=research&order=desc&order_by=created_at`\n    const response = await fetch(\n        uri, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n        }\n    );\n    \n    if (!response.ok) {\n        const message = `An error has occured: ${response.status}`;\n        throw new Error(message);\n    }\n\n    let observations = await response.json();\n    results.push(observations.results);\n\n    console.log(observations.results[observations.results.length - 1]['created_at']);\n    \n    const numPages = 10;\n\n    if (pageNum === numPages) {\n        return results;\n    } else {\n        let nextPage = pageNum + 1\n        return recursiveObservationFetcher(iconicTaxa, nextPage, results)\n    }\n}","import { useState } from 'react';\nimport { Empty, Spin, Skeleton } from 'antd';\nimport { ListerButton } from './ListerButton';\nimport { SpeciesList } from './SpeciesList';\nimport { recursiveObservationFetcher } from './utilities/fetchObservations';\n\nexport function ListerContent() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const createSpeciesList = (dataPages) => {\n    let speciesSet = new Set();\n\n    dataPages.forEach(page => {\n        page.forEach(observation => {\n            // console.log(observation);\n            if (observation['taxon']['preferred_common_name']) {\n              speciesSet.add(observation['taxon']['preferred_common_name']);\n            }\n        })\n    });\n\n    let speciesList = [...speciesSet].sort();\n    return speciesList;\n  }\n\n  const handleListButtonClick = (e) => {\n    setLoading(true);\n    if (data) {\n      setData([]);\n    }\n    recursiveObservationFetcher('Mammalia', 1, []).then(data => {\n      let speciesList = createSpeciesList(data);\n      setData(speciesList);\n      setLoading(false);\n    })\n  }\n\n  const handleClearListButtonClick = (e) => {\n    setData([]);\n  }\n\n  console.log(`${data.length} species observed`);\n  console.log(data);\n\n\n  return (\n    <div className='lister-content'>\n      <ListerButton\n        handleListButtonClick={handleListButtonClick}\n        handleClearListButtonClick={handleClearListButtonClick}\n      />\n      {!data.length ?\n        loading ?\n          <Skeleton active paragraph={{ rows: 10 }} /> :\n            <Empty /> :\n              <SpeciesList speciesList={data} />}\n    </div>\n  )\n}","import { Layout } from 'antd';\nimport { ListerContent } from './ListerContent';\n\nconst { Header, Footer } = Layout;\n\nexport function ListerLayout() {\n  return (\n    <Layout className='lister-layout'>\n      <Header className='lister-header'><h1>Species Lister</h1></Header>\n      <ListerContent />\n      {/* <Footer className='lister-footer'>\n      List created from the last 2000 observations on <a href='https://inaturalist.org'>inaturalist.org</a>\n      </Footer> */}\n    </Layout>\n  );\n}","import './App.less';\nimport { ListerLayout } from './ListerLayout';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ListerLayout />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}